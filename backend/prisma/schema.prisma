generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  addresses Address[]
  cart      Cart?
  orders    Order[]
  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Address {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  street    String
  city      String
  state     String
  country   String
  postalCode String
}

model Category {
  id        String     @id @default(uuid())
  name      String
  slug      String     @unique
  products  Product[]
  createdAt DateTime   @default(now())
}

model Product {
  id          String    @id @default(uuid())
  name        String
  slug        String    @unique
  description String
  price       Float
  stock       Int
  sold        Int       @default(0)
  images      Image[]  // Array of image URLs
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Image {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Cart {
  id         String     @id @default(uuid())
  user       User       @relation(fields: [userId], references: [id])
  userId     String     @unique
  items      CartItem[]
  totalPrice Float      @default(0)
  updatedAt  DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
}

model Order {
  id               String       @id @default(uuid())
  user             User         @relation(fields: [userId], references: [id])
  userId           String
  orderItems       OrderItem[]
  shippingAddress  ShippingAddress?
  paymentMethod    String
  paymentStatus    PaymentStatus @default(PENDING)
  orderStatus      OrderStatus   @default(PROCESSING)
  totalAmount      Float
  couponUsed       Coupon?       @relation(fields: [couponId], references: [id])
  couponId         String?
  createdAt        DateTime      @default(now())
}

model ShippingAddress {
    id String @id @default(uuid())
    orderId    String @unique
    street     String
    city       String
    state      String
    country    String
    postalCode String
    order Order @relation(fields: [orderId], references: [id]) 
  }
  

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Coupon {
  id                 String   @id @default(uuid())
  code               String   @unique
  discountPercentage Float
  expiresAt          DateTime
  isActive           Boolean  @default(true)
  orders             Order[]
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
}
